{"version":3,"sources":["reducers/dictionarySlice.js","components/ListItems.js","components/List.js","components/Content.js","App.js","reducers/store.js","index.js"],"names":["getDictionaryAsync","createAsyncThunk","a","fetch","res","ok","json","dictData","data","addWordtoDictAsync","payload","method","body","JSON","stringify","word","headers","console","log","dictionarySlice","id","wordData","createSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","pending","push","err","ListItems","item","useState","modal","setModal","className","onClick","items","category","definitions","isOpen","ariaHideApp","toLowerCase","class","aria-hidden","map","e","style","color","def","List","searchWord","dispatch","useDispatch","useSelector","dictionary","useEffect","filter","includes","Content","customStyles","content","top","left","right","bottom","marginRight","transform","App","setWord","setSearchWord","type","placeholder","onChange","target","value","replace","autoComplete","preventDefault","alert","configureStore","reducer","dictionaryReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.053ef488.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getDictionaryAsync = createAsyncThunk(\r\n  \"dictionary/getDictAsync\",\r\n  async () => {\r\n    let res = await fetch(\"https://vocabulary-app-be.herokuapp.com/dictionary\");\r\n    if (res.ok) {\r\n      let dictData = await res.json();\r\n      return dictData.data;\r\n    }\r\n  }\r\n);\r\n\r\nexport const addWordtoDictAsync = createAsyncThunk(\r\n  \"dictionary/addWordtoDictAsync\",\r\n  async (payload) => {\r\n    let res = await fetch(\r\n      \"https://vocabulary-app-be.herokuapp.com/dictionary\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ word: payload.word }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    if (res.ok) {\r\n      let data = await res.json();\r\n      console.log(data);\r\n      return { data };\r\n    }\r\n  }\r\n);\r\n\r\nexport const searchWordAsync = createAsyncThunk(\r\n  \"dictionary/searchWordAsync\",\r\n  async (payload) => {\r\n    let res = await fetch(\r\n      `https://vocabulary-app-be.herokuapp.com/dictionary/${payload.id}`\r\n    );\r\n    if (res.ok) {\r\n      let wordData = await res.json();\r\n      console.log(wordData);\r\n      return wordData.data;\r\n    }\r\n  }\r\n);\r\n\r\nconst dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState: [],\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getDictionaryAsync.fulfilled]: (state, action) => {\r\n      return action.payload;\r\n    },\r\n\r\n    [getDictionaryAsync.pending]: (state, action) => {\r\n      // console.log(\"Fetching Data\");\r\n    },\r\n    [addWordtoDictAsync.fulfilled]: (state, action) => {\r\n      try {\r\n        state.push(action.payload.data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport default dictionarySlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nfunction ListItems({ item }) {\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setModal(true);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"item-content\" onClick={openModal}>\r\n        <div>\r\n          <h5>{item.word}</h5>\r\n        </div>\r\n        <p>\r\n          <i>({item.items && item.items[0].category})</i>{\" \"}\r\n          <span>{item.items && item.items[0].definitions[0]}</span>\r\n        </p>\r\n      </div>\r\n      <Modal isOpen={modal} ariaHideApp={true}>\r\n        <div className=\"modal-header\">\r\n          <h3 className=\"modal-word-header\">\r\n            {item.word && item.word.toLowerCase()}\r\n          </h3>\r\n          <button\r\n            className=\"btn btn-dark btn-sm close-btn\"\r\n            onClick={() => setModal(false)}\r\n          >\r\n            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-content\">\r\n          <p>\r\n            {item.items &&\r\n              item.items.map((e) => {\r\n                return (\r\n                  <>\r\n                    <i style={{ color: \"gray\" }}>{e.category}</i>\r\n                    <ul>\r\n                      {e.definitions.map((def) => {\r\n                        return <li>{def}</li>;\r\n                      })}\r\n                    </ul>\r\n                  </>\r\n                );\r\n              })}\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDictionaryAsync } from \"../reducers/dictionarySlice\";\r\nimport ListItems from \"./ListItems\";\r\n\r\nfunction List({ searchWord }) {\r\n  const [modal, setModal] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const dictData = useSelector((state) => state.dictionary);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDictionaryAsync());\r\n  }, [dispatch, dictData]);\r\n\r\n  return (\r\n    <div className=\"container list-container\">\r\n      {dictData &&\r\n        dictData\r\n          .filter((e) =>\r\n            searchWord === \"\"\r\n              ? e\r\n              : e.word &&\r\n                e.word.toLowerCase().includes(searchWord.toLowerCase())\r\n          )\r\n          .map((item) => <ListItems item={item} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\n\r\nimport List from \"./List\";\r\n\r\nfunction Content({ searchWord }) {\r\n  return (\r\n    <div className=\"container content-wrapper\">\r\n      <div className=\"row wordlist\">\r\n        <div className=\"col-lg-12 col-sm-12 \">\r\n          <h6>Words List</h6>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 col-sm-12 table-content\">\r\n          <List searchWord={searchWord} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Content from \"./components/Content\";\nimport Modal from \"react-modal\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addWordtoDictAsync } from \"./reducers/dictionarySlice\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nfunction App() {\n  const [modal, setModal] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const [word, setWord] = useState(\"\");\n  const [searchWord, setSearchWord] = useState(\"\");\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (word === \"\") {\n      alert(\"Please enter a word to proceed\");\n    } else {\n      dispatch(addWordtoDictAsync({ word: word.toLowerCase() }));\n      setWord(\"\");\n      setModal(false);\n    }\n  };\n\n  return (\n    <div className=\"App container\">\n      <div className=\"app-header\">\n        <h1 className=\"header-content\">Vocab</h1>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            id=\"search-word\"\n            placeholder=\"Search\"\n            onChange={(e) =>\n              setSearchWord(e.target.value.replace(/[^A-Za-z]/, \"\"))\n            }\n            value={searchWord}\n            autoComplete=\"off\"\n          />\n          <button>\n            <i class=\"fa fa-search fa-lg\" aria-hidden=\"true\"></i>\n          </button>\n        </div>\n      </div>\n      <Content searchWord={searchWord} />\n      <button className=\"add-word-btn\" onClick={(e) => setModal(true)}>\n        <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n      </button>\n      <Modal isOpen={modal} ariaHideApp={true} style={customStyles}>\n        <div className=\"modal-header\">\n          <h4 className=\"modal-word-header\">Add Word</h4>\n          <button\n            className=\"btn btn-dark btn-sm close-btn\"\n            onClick={() => setModal(false)}\n          >\n            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n          </button>\n        </div>\n        <div className=\"add-word-modal-content\">\n          <input\n            type=\"text\"\n            id=\"word\"\n            onChange={(e) => setWord(e.target.value.replace(/[^A-Za-z]/gi, \"\"))}\n            value={word}\n            placeholder=\"Enter the word..\"\n            autoComplete=\"off\"\n          />\n          <button className=\"btn-primary add-word\" onClick={handleClick}>\n            Add Word\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport dictionaryReducer from \"./dictionarySlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    dictionary: dictionaryReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./reducers/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}